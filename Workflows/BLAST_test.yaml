Global_params:
    Default_wait: 10
    Qsub_opts: -V -cwd
    Qsub_q: myqueue.q
    Qsub_path: /path/to/qsub/bin
    module_path:      ../neatseq_flow_modules
Description: |
    A pipeline showing various ways for using BLAST 
    ------------------------------------------------
    
    Input: paired end or single end reads in gzipped fastq format (fq.gz).
    
    The workflow includes the following stages:
    
    1. Merging and QC
    2. Assembly using MEGAHIT (sample scope. i.e. one assembly per sample)
    3. Constructing a BLAST db from the assembly using the 'makeblastdb' module
    4. Searching the assembly using a fasta query file.
    5. Annotation of the assemblies using prokka
    6. Using the resulting predicted gene sequences to search a BLAST database.
    7. Using the BLAST module ('blast') to search the assembly for the predicted genes.
    
    Note. Module 'parse_blast' uses a program for parsing tabular BLAST tables. The code is freelly accessible at https://github.com/bioinfo-core-BGU/parse_blast

Vars:
    paths:
        merge:                              cat
        makeblastdb:                        /path/to/makeblastdb
        blast:                              /path/to/blast/bin

Step_params:
############################ 1. merge and QC
    Merge_smp:
        module:   Import
        script_path:        {Vars.paths.merge}
        src:                [Nucleotide, Protein, BED]
        trg:                [null,null   ,bed]
        ext:                [null,null   ,bed]
        scope:              sample
        # stop_and_show:
        
        
    Merge_prj:
        module:   Import
        script_path:        {Vars.paths.merge}
        src:                [Nucleotide, Protein, BED]
        trg:                [null,null   ,bed]
        ext:                [null,null   ,bed]
        scope:              project
        # stop_and_show:

    Mkblst_smp:
        module:             makeblastdb
        base:               [Merge_prj, Merge_smp]
        script_path:        {Vars.paths.makeblastdb}
        scope:              sample
        qsub_params:
            -pe:            shared 20
        redirects:
            -dbtype:        nucl
            
    Mkblst_prj:
        module:             makeblastdb
        base:               [Merge_prj, Merge_smp]
        script_path:        {Vars.paths.makeblastdb}
        scope:              project
        qsub_params:
            -pe:            shared 20
        redirects:
            -dbtype:        nucl
        # stop_and_show:
# Plan:
# Internal DB, internal Query
    # 1a. sample DB, sample Query
    # 1b. sample DB, project Query
    # 1c. project DB, sample Query
    # 1d. project DB, project Query
# Internal DB, External Query
    # 2a. sample DB
    # 2b. project DB
# External DB, Internal Query
    # 3a. sample Query
    # 3b. project Query
    

    Blast_1a:
        module:             blast
        base:               [Mkblst_prj, Mkblst_smp]
        script_path:        '{Vars.paths.blast}/blastx'
        db:                 sample
        dbtype:             nucl
        query:              sample
        querytype:          nucl   # Use the 'nucl' output from prokka
        redirects:
            -evalue:        0.0001

    Blast_1b:
        module:             blast
        base:               [Mkblst_prj, Mkblst_smp]
        script_path:        '{Vars.paths.blast}/blastx'
        db:                 sample
        dbtype:             nucl
        query:              project
        querytype:          nucl   # Use the 'nucl' output from prokka
        redirects:
            -evalue:        0.0001
        # stop_and_show_input:

    Blast_1c:
        module:             blast
        base:               [Mkblst_prj, Mkblst_smp]
        script_path:        '{Vars.paths.blast}/blastx'
        db:                 project
        dbtype:             nucl
        query:              sample
        querytype:          nucl   # Use the 'nucl' output from prokka
        redirects:
            -evalue:        0.0001

    Blast_1d:
        module:             blast
        base:               [Mkblst_prj, Mkblst_smp]
        script_path:        '{Vars.paths.blast}/blastx'
        db:                 project
        dbtype:             nucl
        query:              project
        querytype:          nucl   # Use the 'nucl' output from prokka
        redirects:
            -evalue:        0.0001


    Blast_2a:
        module:             blast
        base:               [Mkblst_prj, Mkblst_smp]
        script_path:        '{Vars.paths.blast}/blastx'
        db:                 sample
        dbtype:             nucl
        query:              /path/to/query
        querytype:          nucl   # Use the 'nucl' output from prokka
        redirects:
            -evalue:        0.0001

    Blast_2b:
        module:             blast
        base:               [Mkblst_prj, Mkblst_smp]
        script_path:        '{Vars.paths.blast}/blastx'
        db:                 project
        dbtype:             nucl
        query:              /path/to/query
        querytype:          nucl   # Use the 'nucl' output from prokka
        redirects:
            -evalue:        0.0001

    Blast_3a:
        module:             blast
        base:               [Mkblst_prj, Mkblst_smp]
        script_path:        '{Vars.paths.blast}/blastx'
        db:                 /path/to/blastdb
        dbtype:             nucl
        query:              sample
        querytype:          nucl   # Use the 'nucl' output from prokka
        redirects:
            -evalue:        0.0001

    Blast_3b:
        module:             blast
        base:               [Mkblst_prj, Mkblst_smp]
        script_path:        '{Vars.paths.blast}/blastx'
        db:                 /path/to/blastdb
        dbtype:             nucl
        query:              project
        querytype:          nucl   # Use the 'nucl' output from prokka
        redirects:
            -evalue:        0.0001
