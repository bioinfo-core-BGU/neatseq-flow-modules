Global_params:
    Default_wait: 10
    Qsub_opts: -V -cwd
    Qsub_path: /path/to/qsub/bin
    Qsub_q: queue.q
    module_path:      ../neatseq_flow_modules
    
    
Description: |
    A pipeline for basic RNA-seq analysis using Trinity
    ---------------------------------------------------
    
    This workflow takes reads in fastq format, either paired-end or single, and assembles a trascriptome with Trinity.
    
    It then runs `align_and_estimate_abundance.pl` and `abundance_estimates_to_matrix.pl` to map the reads to the trascriptome and create normalized counts tables. These tables can then be used in DEseq2 or other tools for statistical analysis of RNA-seq data.
    
    Steps:
    ------
    
    1. Concatenating the read files into single files per direction
    
        Note: No QC steps are included here, but you should consider adding trimmomatic and fastqc steps to the workflow.
    
    2. Adding tags required by trinity to the read titles (/1 and /2 for F and R. See https://github.com/trinityrnaseq/trinityrnaseq/wiki/Running-Trinity)
    3. Running Trinity. Trinity must be configured to run on a cluster. The configuration file is passed with --grid_conf.
    4. Mapping of the reads is performed with trinity_mapping module
    5. Creating statistical tables is performed with trinmap_statistics module.
    
    
Vars:
    paths:
        merge:              gzip -cd    
        bowtie2:            /path/to/bowtie2_v2.2.5         # Path to the dir which includes bowtie2 and bowtie2-build executables
        Trinity:            /path/to/trinity/               # Path to the dir which contains Trinity executable and a dir util/ with the toolkit scripts
        SGE_Trinity_conf:   /path/to/cluster_Trinity_conf.txt  # Path to file with cluster configuration for trinity. See --grid_conf parameter in trinity manual.
        RSEM:               /path/to/rsem/bin               # Path to dir containing rsem scripts 
        samtools:           /path/to/samtools-1.3/bin       # Path to dir containing samtools executable
        STAR:               /path/to/STAR                   # Path to STAR executable
        # bowtie2:            /path/to/bowtie2/
        # samtools:           /path/to/samtools
        hpc_cmds_GridRunner:    /path/to/hpc_cmds_GridRunner.pl
        BUSCO:              /path/to/BUSCO.py
        filter_trinity_by_counts:   /path/to/filter_trinity_by_counts.R
# -------- Trinotate
        TransDecoder:       /path/to/Trinity/TransDecoder-v5.0.2/TransDecoder
        Trinotate:          /path/to/Trinity/Trinotate-v3.1.1/Trinotate    
        hmmscan:            /path/to/HMMER/HMMER_v3.1b1/bin/hmmscan
        hmm:                /path/to/HMMER/HMMER_v3.1b1/bin
        blast:              /path/to/BLAST/ncbi-blast-2.7.1+/bin
        blastp:             /path/to/BLAST/ncbi-blast-2.7.1+/bin/blastp
        blastn:             /path/to/BLAST/ncbi-blast-2.7.1+/bin/blastn        
    databases:
        BUSCO:              /path/to/BUSCO/dataset
        trinotate:
            sprot:          /gpfs0/bioinfo/databases/Trinity/Trinotate_v3.1.1/uniprot_sprot_blastdb/sprot
            pfam:           /gpfs0/bioinfo/databases/Trinity/Trinotate_v3.1.1/PFAM/Pfam-A.hmm
            sqlitedb:       /gpfs0/bioinfo/databases/Trinity/Trinotate_v3.1.1/Trinotate.sqlite        

Step_params:
    Merge:
        module:             merge
        script_path:        {Vars.paths.merge}
    Trinity_tags:
        module:             add_trinity_tags
        base:               Merge
        script_path: 
    Trinity_assembl:
        module:             trinity_new
        base:               Trinity_tags
        script_path:        '{Vars.paths.Trinity}/Trinity'
        qsub_params:
            -pe:            shared 20
        scope:              project
        redirects:
            --grid_exec:        '"{Vars.paths.hpc_cmds_GridRunner} --grid_conf {Vars.paths.SGE_Trinity_conf} -c"'
            --seqType:          fq
            --min_kmer_cov:     2
            # --full_cleanup:
        # stop_and_show:
        
    Get_Trans_Map:
        module:             Trinity_gene_to_trans_map
        base:               Trinity_assembl
        script_path:        '{Vars.paths.Trinity}/util/support_scripts/get_Trinity_gene_to_trans_map.pl'
        scope:              project
        # stop_and_show:

######################

    Trinity_Map:
        module:             trinity_mapping
        base:               Get_Trans_Map
        script_path:        '{Vars.paths.Trinity}/util/align_and_estimate_abundance.pl'
        sample_list:        [Sample1,Sample2]
        scope:              project
        setenv:             PATH "{Vars.paths.bowtie2}:{Vars.paths.RSEM}:{Vars.paths.samtools}:$PATH"
        redirects:
            --est_method:   rsem
            --aln_method:   bowtie
            # --output_prefix:        # Pass to add output_prefix. This is for older versions of trinity...
            # --gene_trans_map:
            --trinity_mode:
            --coordsort_bam:
            --seqType:      fq
        # stop_and_show:
    Trinity_Map_Stats:
        module:             trinmap_statistics
        base:               Trinity_Map
        script_path:        '{Vars.paths.Trinity}/util/abundance_estimates_to_matrix.pl'
        # use_isoforms:          # use isoforms results. Remove to use genes results
        scope:              project
        redirects:
            --est_method:   RSEM
            # --gene_trans_map:   
        # stop_and_show:

    filter_fasta:                   # Name of this step
        module:             Generic             # Name of module
        base:               Trinity_Map_Stats
        script_path:        {Vars.paths.filter_trinity_by_counts}
        scope:              project
        shell:              bash                   
        inputs:                     # The inputs for this module
            --counts:                    # Input argument, could be also 'empty#'
                scope:      project
                File_Type:  isoform.norm_counts
            --FASTA:
                scope:      project
                File_Type:  fasta.nucl
        outputs:                    
            --output:                    
                File_Type:   fasta.nucl
                suffix:      .filtered.fasta       # A suffix for this output argument file name    
        redirects:
            --grouping:     /gpfs0/bioinfo/users/sklarz/trinity_trial/07.Sample_grouping.txt
            --min_count:    1
            --min_sample:   2 
            --min_groups:   1
        # stop_and_show:


    BUSCO1:
        module:             BUSCO
        base:               Trinity_assembl
        script_path:        {Vars.paths.BUSCO} 
        scope:              project
        redirects:
            --mode:         transcriptome
            --lineage:      {Vars.databases.BUSCO}
            --cpu:          65
            --force:
            --restart:
        qsub_params:
            -pe:            shared 65
            
            

# ----------------------------------------------------------------
# Trinotate pipeline:
    # To save time, split into small subsamples
    Split_Fasta:
        module:             split_fasta
        base:               Trinity_assembl
        script_path:
        scope:              project
        type:               nucl
        subsample_num:      4

    trino_blastx_sprot_highExpr:
        module:             blast_new
        base:               Split_Fasta
        script_path:        '{Vars.paths.blast}/blastx'
        query:         sample
        db:            {Vars.databases.trinotate.sprot}
        querytype:          nucl
        redirects:
            -max_target_seqs: 1
            -num_threads:   1
            -outfmt:        6
    trino_Transdecode_highExpr:
        module:             TransDecoder
        base:               Split_Fasta
        script_path:        "{Vars.paths.TransDecoder}.LongOrfs"
        scope:              sample
    trino_blastp_sprot_highExpr:
        module:             blast_new
        base:               trino_Transdecode_highExpr
        script_path:        {Vars.paths.blastp}
        query:         sample
        db:            {Vars.databases.trinotate.sprot}
        querytype:          prot
        redirects:
            -max_target_seqs: 1
            -num_threads:   1
            -outfmt:        6
    trino_hmmscan1_highExpr:
        module:             hmmscan
        base:               trino_Transdecode_highExpr
        script_path:        {Vars.paths.hmmscan}
        scope:              sample
        type:               prot
        output_type:        domtblout  # one of tblout (parseable table of per-sequence hits to file), domtblout (parseable table of per-domain hits to file) and pfamtblout (table of hits and domains in Pfam format)
        hmmdb:              {Vars.databases.trinotate.pfam}
        qsub_params:
            -q:             bioinfo.q
            # -pe:            shared 10
        redirects:
            --cpu:          1

    trino_rnammer_highExpr:
        module:             RnammerTranscriptome
        base:               Split_Fasta
        script_path:        /gpfs0/bioinfo/apps/Trinity/Trinotate-v3.1.1/util/rnammer_support/RnammerTranscriptome.pl #{Vars.paths.hmmscan}
        scope:              sample
        redirects:
            --path_to_rnammer:  /gpfs0/bioinfo/apps/RNAMMER/RNAMMER_v1.2/rnammer
    
    trino_Transdecode_Predict:
        module:             TransDecoder
        base:               
            - trino_Transdecode_highExpr
            - trino_blastp_sprot_highExpr
            - trino_hmmscan1_highExpr
        script_path:        "{Vars.paths.TransDecoder}.Predict"
        scope:              sample
        redirects:
            --single_best_only:
        # Predict:

    trino_merge_blast_highExpr:
        module:             merge_table
        base:               [trino_blastp_sprot_highExpr,trino_blastx_sprot_highExpr,trino_rnammer_highExpr]
        script_path:        
        type:               [blast.prot,blast.nucl,transcripts.fasta.nucl,fasta.prot,rnammer]
        # header:             5
        # stop_and_show:
        
    trino_merge_hmm_highExpr:
        module:             merge_table
        base:               trino_hmmscan1_highExpr
        script_path:        
        type:               hmmscan.prot
        header:             3
        # stop_and_show:


    # temp1:
        # module:             manage_types
        # base:                           
            # - trino_merge_blast_highExpr
            # - trino_merge_hmm_highExpr

        # script_path:        
        # scope:      project
        # operation: add
        # type:               hmmscan.prot
        # path:             yoohooo
        # stop_and_show:

    trino_Trinotate1_highExpr:
        module:             Trinotate
        base:               
            - trino_merge_blast_highExpr
            - trino_merge_hmm_highExpr
            - Get_Trans_Map
        # stop_and_show:
        script_path:        {Vars.paths.Trinotate}
        scope:              project
        sqlitedb:           {Vars.databases.trinotate.sqlitedb}
        cp_sqlitedb:        



#####################################################
# Project-wide decoder with Predict
    trino_Transdecode_proj:
        module:             TransDecoder
        base:               Trinity_assembl
        script_path:        "{Vars.paths.TransDecoder}.LongOrfs"
        scope:              project
    trino_blastp_sprot_proj:
        module:             blast_new
        base:               trino_Transdecode_proj
        script_path:        {Vars.paths.blastp}
        query:              project
        db:            {Vars.databases.trinotate.sprot}
        querytype:          prot
        redirects:
            -max_target_seqs: 1
            -num_threads:   1
            -outfmt:        6
    trino_hmmscan1_proj:
        module:             hmmscan
        base:               trino_Transdecode_proj
        script_path:        {Vars.paths.hmmscan}
        scope:              project
        type:               prot
        output_type:        domtblout  # one of tblout (parseable table of per-sequence hits to file), domtblout (parseable table of per-domain hits to file) and pfamtblout (table of hits and domains in Pfam format)
        hmmdb:              {Vars.databases.trinotate.pfam}
        qsub_params:
            -q:             bioinfo.q
            # -pe:            shared 10
        redirects:
            --cpu:          1

    
    trino_Transdecode_Predict_proj:
        module:             TransDecoder
        base:               
            - trino_Transdecode_proj
            - trino_blastp_sprot_proj
            - trino_hmmscan1_proj
        script_path:        "{Vars.paths.TransDecoder}.Predict"
        scope:              project
        # keep_previous:
        redirects:
            --single_best_only:
        # Predict: