Global_params:
    Default_wait: 10
    Qsub_opts: -V -cwd
    Qsub_path: /path/to/qsub/bin
    Qsub_q: queue.q
    module_path:      ../modules_release_1.1.0
Description: |
    A pipeline for basic RNA-seq analysis using Trinity
    ---------------------------------------------------
    
    This workflow takes reads in fastq format, either paired-end or single, and assembles a trascriptome with Trinity.
    
    It then runs `align_and_estimate_abundance.pl` and `abundance_estimates_to_matrix.pl` to map the reads to the trascriptome and create normalized counts tables. These tables can then be used in DEseq2 or other tools for statistical analysis of RNA-seq data.
    
    Steps:
    ------
    
    1. Concatenating the read files into single files per direction
    
        Note: No QC steps are included here, but you should consider adding trimmomatic and fastqc steps to the workflow.
    
    2. Adding tags required by trinity to the read titles (/1 and /2 for F and R. See https://github.com/trinityrnaseq/trinityrnaseq/wiki/Running-Trinity)
    3. Running Trinity. Trinity must be configured to run on a cluster. The configuration file is passed with --grid_conf.
    4. Mapping of the reads is performed with trinity_mapping module
    5. Creating statistical tables is performed with trinmap_statistics module.
    
    
Vars:
    paths:
        merge:              gzip -cd    
        bowtie2:            /path/to/bowtie2_v2.2.5         # Path to the dir which includes bowtie2 and bowtie2-build executables
        Trinity:            /path/to/trinity/               # Path to the dir which contains Trinity executable and a dir util/ with the toolkit scripts
        SGE_Trinity_conf:   /path/to/cluster_Trinity_conf.txt  # Path to file with cluster configuration for trinity. See --grid_conf parameter in trinity manual.
        RSEM:               /path/to/rsem/bin               # Path to dir containing rsem scripts 
        samtools:           /path/to/samtools-1.3/bin       # Path to dir containing samtools executable
        STAR:               /path/to/STAR                   # Path to STAR executable
        blastn:             /path/to/blastn
Step_params:
    merge1:
        module:             merge
        script_path:        {Vars.paths.merge}
    trin_tags1:
        module:             add_trinity_tags
        base:               merge1
        script_path: 
    trinity1:
        module:             trinity
        base:               trin_tags1
        script_path:        '{Vars.paths.Trinity}/Trinity'
        qsub_params:
            -pe:            shared 20
        scope:              project
        redirects:
            --CPU:          20
            --JM:           140G
            --full_cleanup: 
            --grid_conf:    {Vars.paths.SGE_Trinity_conf}
            --min_kmer_cov: 2
            --seqType:      fq
    split_fasta1:
        module:         split_fasta
        base:           trinity1
        script_path:
        scope:          project
        type:           nucl
        subsample_num:  10
    blst_fasta:
        module:             blast_new
        base:               split_fasta1
        script_path:        {Vars.paths.blastn}
        querytype:          nucl
        dbtype:             nucl
        qsub_params:
            -pe:            shared 10
        redirects:
            -query:         sample
            -db:            /path/to/db
            -evalue:        0.0001
            -max_target_seqs: 20
            -num_threads:   10
            -outfmt:        '"6 qseqid sallseqid qlen slen qstart qend sstart send length evalue bitscore score pident qframe"'
    manage_types1:
        module:             manage_types
        base:               trinity1
        script_path:        
        scope:              [project,sample,sample,project]
        operation:          [mv,del,mv,add]
        type:               [fasta.nucl,fasta.nucl,fastq.F,yoohoo]
        type_trg:           [GGGGGGG, None ,FFFFFFF,None]
        scope_trg:          sample
        path:               /path.to.yoohoo    
