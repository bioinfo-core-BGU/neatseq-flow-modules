Global_params:
    Default_wait: 10
    Qsub_opts: -V -cwd
    Qsub_q: myqueue.q
    Qsub_path: /path/to/qsub/bin
    module_path: C:\Users\sklarz.BGU-USERS\Documents\python_pipeline_gitlab\python_pipeline\additional_modules\additional_modules_release_1.1.0
Description: |
    A pipeline showing various ways for using BLAST 
    -----------------------------------------------
    
    This workflow begins with an assembly, i.e. a file in fasta format containing genomic sequences.
    
    The workflow then performs the following steps on the genomic sequences:
    
    1. Constructing a BLAST db from the assembly using the 'makeblastdb' module
    2. Searching the assembly using a fasta query file.
    3. Annotation of the assemblies using prokka
    4. Using the resulting predicted gene sequences to search a BLAST database.
    5. Using the alternative BLAST module ('blast_new') to search the assembly for the predicted genes.

Vars:
    paths:
        prokka:         /path/to/prokka
        makeblastdb:    /path/to/makeblastdb
        blast:                              /path/to/blast/bin
        parse_blast:    Rscript /path/to/parse_blast.R
        compare_blast_parsed_reports:    Rscript /path/to/compare_blast_parsed_reports.R
    databases:
        gene_list:  
            fasta:  /path/to/gene_list.fasta
            table:  /path/to/gene_list.tsv
Step_params:
    merge_nucl:
        module: merge
        script_path: cat
############################ 1. BLAST db construction
    mkblst_nucl:
        module:             makeblastdb
        base:               merge_nucl
        script_path:        {Vars.paths.makeblastdb}
        scope:              sample
        qsub_params:
            -pe:            shared 20
        redirects:
            -dbtype:        nucl
############################ 2. BLAST external fasta against genomic sequences
    blst_asmbl:
        module:             blast
        base:               mkblst_nucl
        script_path:        '{Vars.paths.blast}/tblastn'
        qsub_params:
            -pe:            shared 20
            queue:          all.q
        scope:              sample
        redirects:
            -evalue:        0.0001
            -num_descriptions: 20
            -num_threads:   20
            -outfmt:        '"6 qseqid sallseqid qlen slen qstart qend sstart send length
                            evalue bitscore score pident qframe"'
            -query:         {Vars.databases.VFDB.fasta}
    parse_tbl_blst:
        module:             parse_blast
        base:               blst_asmbl
        script_path:        {Vars.paths.parse_blast}
        blast_merge_path:   {Vars.paths.compare_blast_parsed_reports}
        scope:  sample
        redirects:
            --dbtable:      {Vars.databases.VFDB.table}
            --max_evalue:   1e-7
            --min_bitscore: 100
            --names:        '"qseqid sallseqid qlen slen qstart qend sstart send length evalue
                            bitscore score pident qframe"'
############################ 5. Annotation of the assembly with prokka
    prokka_asmbl:
        module:             prokka
        base:               megahit_asmbl
        script_path:        {Vars.paths.prokka}
        qsub_params:
            -pe:            shared 20
        generate_GFF_dir:
        scope:              sample
        redirects:
            --cpus:         20
            --fast:
            --force:
            --genus:        Staphylococcus
            --metagenome:
            --strain:
############################ 6. BLAST predicted genes against swissprot
    blst_genes:
        module:             blast
        base:               prokka_asmbl
        script_path:        '{Vars.paths.blast}/blastx'
        qsub_params:
            -pe:            shared 20
            queue:          all.q
        fasta2use:          nucl
        scope:              sample
        redirects:
            -evalue:        0.0001
            -num_descriptions: 20
            -num_threads:   20
            -outfmt:        '"6 qseqid sallseqid qlen slen qstart qend sstart send length
                            evalue bitscore score pident qframe"'
            -db:            {Vars.databases.uniprot_sprot.blastdb}
    parse_tbl_blst:
        module:             parse_blast
        base:               blst_genes
        script_path:        {Vars.paths.parse_blast}
        blast_merge_path:   {Vars.paths.compare_blast_parsed_reports}
        scope:              sample
        redirects:
            --dbtable:      {Vars.databases.VFDB.table}
            --max_evalue:   1e-7
            --min_bitscore: 100
            --names:        '"qseqid sallseqid qlen slen qstart qend sstart send length evalue
                            bitscore score pident qframe"'
############################ 7. BLAST predicted genes against swissprot - Alternative module 
    blst_genes_alt:
        module:             blast_new
        base:               prokka_asmbl
        script_path:        '{Vars.paths.blast}/blastx'
        redirects:
            -db:            {Vars.databases.uniprot_sprot.blastdb}
            -query:         sample
            -evalue:        0.0001
        querytype:          nucl   # Use the 'nucl' output from prokka
############################ BONUS. BLAST predicted genes against assembly 
    blst_genes_asmbl:
        module:             blast_new
        base:               [prokka_asmbl,mkblst_nucl]
        script_path:        '{Vars.paths.blast}/blastn'
        redirects:
            -db:            sample
            -query:         sample
            -evalue:        0.0001
        querytype:          nucl   # Use the 'nucl' output from prokka
        dbtype:             nucl   # Use the 'nucl' output from prokka

